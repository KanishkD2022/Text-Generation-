{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":6944507,"sourceType":"datasetVersion","datasetId":5914}],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!pip install transformers datasets --quiet","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-04-20T17:12:16.558446Z","iopub.execute_input":"2025-04-20T17:12:16.558670Z","iopub.status.idle":"2025-04-20T17:12:21.084254Z","shell.execute_reply.started":"2025-04-20T17:12:16.558655Z","shell.execute_reply":"2025-04-20T17:12:21.083552Z"}},"outputs":[{"name":"stdout","text":"\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m183.9/183.9 kB\u001b[0m \u001b[31m6.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25h\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\ngcsfs 2024.10.0 requires fsspec==2024.10.0, but you have fsspec 2024.12.0 which is incompatible.\ntorch 2.5.1+cu124 requires nvidia-cublas-cu12==12.4.5.8; platform_system == \"Linux\" and platform_machine == \"x86_64\", but you have nvidia-cublas-cu12 12.8.4.1 which is incompatible.\ntorch 2.5.1+cu124 requires nvidia-cudnn-cu12==9.1.0.70; platform_system == \"Linux\" and platform_machine == \"x86_64\", but you have nvidia-cudnn-cu12 9.3.0.75 which is incompatible.\ntorch 2.5.1+cu124 requires nvidia-cufft-cu12==11.2.1.3; platform_system == \"Linux\" and platform_machine == \"x86_64\", but you have nvidia-cufft-cu12 11.3.3.83 which is incompatible.\ntorch 2.5.1+cu124 requires nvidia-curand-cu12==10.3.5.147; platform_system == \"Linux\" and platform_machine == \"x86_64\", but you have nvidia-curand-cu12 10.3.9.90 which is incompatible.\ntorch 2.5.1+cu124 requires nvidia-cusolver-cu12==11.6.1.9; platform_system == \"Linux\" and platform_machine == \"x86_64\", but you have nvidia-cusolver-cu12 11.7.3.90 which is incompatible.\ntorch 2.5.1+cu124 requires nvidia-cusparse-cu12==12.3.1.170; platform_system == \"Linux\" and platform_machine == \"x86_64\", but you have nvidia-cusparse-cu12 12.5.8.93 which is incompatible.\ntorch 2.5.1+cu124 requires nvidia-nvjitlink-cu12==12.4.127; platform_system == \"Linux\" and platform_machine == \"x86_64\", but you have nvidia-nvjitlink-cu12 12.8.93 which is incompatible.\nbigframes 1.36.0 requires rich<14,>=12.4.4, but you have rich 14.0.0 which is incompatible.\u001b[0m\u001b[31m\n\u001b[0m","output_type":"stream"}],"execution_count":2},{"cell_type":"markdown","source":"# Install Required Libraries","metadata":{}},{"cell_type":"code","source":"pip install hf_xet","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T17:12:25.139157Z","iopub.execute_input":"2025-04-20T17:12:25.139447Z","iopub.status.idle":"2025-04-20T17:12:30.110772Z","shell.execute_reply.started":"2025-04-20T17:12:25.139423Z","shell.execute_reply":"2025-04-20T17:12:30.109829Z"}},"outputs":[{"name":"stdout","text":"Collecting hf_xet\n  Downloading hf_xet-1.0.3-cp37-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (494 bytes)\nDownloading hf_xet-1.0.3-cp37-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (53.8 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m53.8/53.8 MB\u001b[0m \u001b[31m32.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hInstalling collected packages: hf_xet\nSuccessfully installed hf_xet-1.0.3\nNote: you may need to restart the kernel to use updated packages.\n","output_type":"stream"}],"execution_count":3},{"cell_type":"markdown","source":"# Import Libraries","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport torch\nfrom transformers import (\n    GPT2Tokenizer,\n    GPT2LMHeadModel,\n    TextDataset,\n    DataCollatorForLanguageModeling,\n    Trainer,\n    TrainingArguments,\n    pipeline,\n    set_seed\n)\nimport matplotlib.pyplot as plt\nimport os","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T17:12:34.967717Z","iopub.execute_input":"2025-04-20T17:12:34.968037Z","iopub.status.idle":"2025-04-20T17:13:02.166485Z","shell.execute_reply.started":"2025-04-20T17:12:34.968007Z","shell.execute_reply":"2025-04-20T17:13:02.165711Z"}},"outputs":[{"name":"stderr","text":"2025-04-20 17:12:48.196387: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nE0000 00:00:1745169168.384271      31 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\nE0000 00:00:1745169168.437479      31 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"}],"execution_count":4},{"cell_type":"markdown","source":"# Upload and Load the Dataset","metadata":{}},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/india-headlines-news-dataset/india-news-headlines.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T17:13:07.437161Z","iopub.execute_input":"2025-04-20T17:13:07.438070Z","iopub.status.idle":"2025-04-20T17:13:14.190579Z","shell.execute_reply.started":"2025-04-20T17:13:07.438042Z","shell.execute_reply":"2025-04-20T17:13:14.189866Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"df.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T17:13:19.386277Z","iopub.execute_input":"2025-04-20T17:13:19.386558Z","iopub.status.idle":"2025-04-20T17:13:19.408566Z","shell.execute_reply.started":"2025-04-20T17:13:19.386537Z","shell.execute_reply":"2025-04-20T17:13:19.408018Z"}},"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"   publish_date headline_category  \\\n0      20010102           unknown   \n1      20010102           unknown   \n2      20010102           unknown   \n3      20010102           unknown   \n4      20010102           unknown   \n\n                                       headline_text  \n0  Status quo will not be disturbed at Ayodhya; s...  \n1                Fissures in Hurriyat over Pak visit  \n2              America's unwanted heading for India?  \n3                 For bigwigs; it is destination Goa  \n4               Extra buses to clear tourist traffic  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>publish_date</th>\n      <th>headline_category</th>\n      <th>headline_text</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>20010102</td>\n      <td>unknown</td>\n      <td>Status quo will not be disturbed at Ayodhya; s...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>20010102</td>\n      <td>unknown</td>\n      <td>Fissures in Hurriyat over Pak visit</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>20010102</td>\n      <td>unknown</td>\n      <td>America's unwanted heading for India?</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>20010102</td>\n      <td>unknown</td>\n      <td>For bigwigs; it is destination Goa</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>20010102</td>\n      <td>unknown</td>\n      <td>Extra buses to clear tourist traffic</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":6},{"cell_type":"markdown","source":"# Clean the Dataset","metadata":{}},{"cell_type":"code","source":"df.dropna(subset=['headline_text'], inplace=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T17:13:22.471833Z","iopub.execute_input":"2025-04-20T17:13:22.472424Z","iopub.status.idle":"2025-04-20T17:13:22.862045Z","shell.execute_reply.started":"2025-04-20T17:13:22.472401Z","shell.execute_reply":"2025-04-20T17:13:22.861449Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"df.dropna(subset=['headline_text'], inplace=True)\ndf = df[df['headline_text'].str.strip().astype(bool)]  # Remove empty strings","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T17:13:25.388638Z","iopub.execute_input":"2025-04-20T17:13:25.388931Z","iopub.status.idle":"2025-04-20T17:13:26.551107Z","shell.execute_reply.started":"2025-04-20T17:13:25.388904Z","shell.execute_reply":"2025-04-20T17:13:26.550266Z"}},"outputs":[],"execution_count":8},{"cell_type":"markdown","source":"# Combine all headlines into one text blob","metadata":{}},{"cell_type":"code","source":"text_data = \"\\n\".join(df['headline_text'].astype(str).tolist())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T17:13:31.256148Z","iopub.execute_input":"2025-04-20T17:13:31.256796Z","iopub.status.idle":"2025-04-20T17:13:31.725306Z","shell.execute_reply.started":"2025-04-20T17:13:31.256774Z","shell.execute_reply":"2025-04-20T17:13:31.724629Z"}},"outputs":[],"execution_count":10},{"cell_type":"markdown","source":"# Save to a .txt file","metadata":{}},{"cell_type":"code","source":"os.makedirs(\"./data\", exist_ok=True)\nwith open(\"./data/india_headlines.txt\", \"w\", encoding=\"utf-8\") as f:\n    f.write(text_data)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T17:13:34.454034Z","iopub.execute_input":"2025-04-20T17:13:34.454750Z","iopub.status.idle":"2025-04-20T17:13:34.767504Z","shell.execute_reply.started":"2025-04-20T17:13:34.454726Z","shell.execute_reply":"2025-04-20T17:13:34.766846Z"}},"outputs":[],"execution_count":11},{"cell_type":"markdown","source":"# Load GPT-2 Model and Tokenizer","metadata":{}},{"cell_type":"code","source":"tokenizer = GPT2Tokenizer.from_pretrained(\"gpt2\")\ntokenizer.pad_token = tokenizer.eos_token\n\nmodel = GPT2LMHeadModel.from_pretrained(\"gpt2\")\nmodel.resize_token_embeddings(len(tokenizer))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T17:13:37.513284Z","iopub.execute_input":"2025-04-20T17:13:37.514085Z","iopub.status.idle":"2025-04-20T17:13:42.912285Z","shell.execute_reply.started":"2025-04-20T17:13:37.514052Z","shell.execute_reply":"2025-04-20T17:13:42.911488Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"tokenizer_config.json:   0%|          | 0.00/26.0 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"665a59657450455cb04b0df372fefe32"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"vocab.json:   0%|          | 0.00/1.04M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"4ea218e1cd404dbe81853599547e02e3"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"merges.txt:   0%|          | 0.00/456k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"84c4f02cd10a478ca1b8e788614b0b6e"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"tokenizer.json:   0%|          | 0.00/1.36M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"bc47be81acb04394a667c220e1053efd"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"config.json:   0%|          | 0.00/665 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"47320ee79bd94e0283908e10dee6203d"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"model.safetensors:   0%|          | 0.00/548M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"66af18e60ab44d859a85b0d560e36f57"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"generation_config.json:   0%|          | 0.00/124 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"fc5e9591eeb74442811df1e5d9343084"}},"metadata":{}},{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"Embedding(50257, 768)"},"metadata":{}}],"execution_count":12},{"cell_type":"markdown","source":"# Prepare Dataset","metadata":{}},{"cell_type":"code","source":"def load_dataset(file_path, tokenizer, block_size=128):\n    return TextDataset(\n        tokenizer=tokenizer,\n        file_path=file_path,\n        block_size=block_size\n    )\n\ntrain_dataset = load_dataset(\"./data/india_headlines.txt\", tokenizer)\ndata_collator = DataCollatorForLanguageModeling(tokenizer=tokenizer, mlm=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T17:13:48.227293Z","iopub.execute_input":"2025-04-20T17:13:48.227556Z","iopub.status.idle":"2025-04-20T17:18:10.029726Z","shell.execute_reply.started":"2025-04-20T17:13:48.227539Z","shell.execute_reply":"2025-04-20T17:18:10.029115Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/transformers/data/datasets/language_modeling.py:53: FutureWarning: This dataset will be removed from the library soon, preprocessing should be handled with the 🤗 Datasets library. You can have a look at this example script for pointers: https://github.com/huggingface/transformers/blob/main/examples/pytorch/language-modeling/run_mlm.py\n  warnings.warn(\n","output_type":"stream"}],"execution_count":13},{"cell_type":"markdown","source":"# Define Training Arguments","metadata":{}},{"cell_type":"code","source":"from transformers import TrainingArguments, Trainer","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T17:18:42.441345Z","iopub.execute_input":"2025-04-20T17:18:42.441641Z","iopub.status.idle":"2025-04-20T17:18:42.445160Z","shell.execute_reply.started":"2025-04-20T17:18:42.441611Z","shell.execute_reply":"2025-04-20T17:18:42.444420Z"}},"outputs":[],"execution_count":17},{"cell_type":"code","source":"training_args = TrainingArguments(\n    output_dir=\"./gpt2-india-news\",\n    overwrite_output_dir=True,\n    max_steps=25000,  # Run exactly 25,000 steps\n    per_device_train_batch_size=4,  # Balanced for a P100 (can adjust to 8 if memory allows)\n    gradient_accumulation_steps=2,  # Effective batch size = 4 x 2 = 8\n    save_steps=1000,  # Save every 1,000 steps\n    save_total_limit=3,  # Keep last 3 checkpoints\n    prediction_loss_only=True,\n    logging_dir=\"./logs\",\n    logging_steps=100,\n    report_to=[],\n    fp16=True  # Mixed precision training for speed on P100\n)\n\ntrainer = Trainer(\n    model=model,\n    args=training_args,\n    data_collator=data_collator,\n    train_dataset=train_dataset,\n    tokenizer=tokenizer\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T17:18:45.513359Z","iopub.execute_input":"2025-04-20T17:18:45.513640Z","iopub.status.idle":"2025-04-20T17:18:45.881630Z","shell.execute_reply.started":"2025-04-20T17:18:45.513614Z","shell.execute_reply":"2025-04-20T17:18:45.881017Z"}},"outputs":[{"name":"stderr","text":"/tmp/ipykernel_31/1231911462.py:16: FutureWarning: `tokenizer` is deprecated and will be removed in version 5.0.0 for `Trainer.__init__`. Use `processing_class` instead.\n  trainer = Trainer(\n","output_type":"stream"}],"execution_count":18},{"cell_type":"markdown","source":"# Fine-Tune the Model ","metadata":{}},{"cell_type":"code","source":"trainer.train()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T17:18:50.527568Z","iopub.execute_input":"2025-04-20T17:18:50.527843Z","iopub.status.idle":"2025-04-20T18:40:28.125464Z","shell.execute_reply.started":"2025-04-20T17:18:50.527823Z","shell.execute_reply":"2025-04-20T18:40:28.124828Z"}},"outputs":[{"name":"stderr","text":"`loss_type=None` was set in the config but it is unrecognised.Using the default loss: `ForCausalLMLoss`.\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"\n    <div>\n      \n      <progress value='25000' max='25000' style='width:300px; height:20px; vertical-align: middle;'></progress>\n      [25000/25000 1:21:35, Epoch 0/1]\n    </div>\n    <table border=\"1\" class=\"dataframe\">\n  <thead>\n <tr style=\"text-align: left;\">\n      <th>Step</th>\n      <th>Training Loss</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>100</td>\n      <td>5.027600</td>\n    </tr>\n    <tr>\n      <td>200</td>\n      <td>4.859700</td>\n    </tr>\n    <tr>\n      <td>300</td>\n      <td>4.781900</td>\n    </tr>\n    <tr>\n      <td>400</td>\n      <td>4.716200</td>\n    </tr>\n    <tr>\n      <td>500</td>\n      <td>4.676100</td>\n    </tr>\n    <tr>\n      <td>600</td>\n      <td>4.650300</td>\n    </tr>\n    <tr>\n      <td>700</td>\n      <td>4.608100</td>\n    </tr>\n    <tr>\n      <td>800</td>\n      <td>4.570500</td>\n    </tr>\n    <tr>\n      <td>900</td>\n      <td>4.568600</td>\n    </tr>\n    <tr>\n      <td>1000</td>\n      <td>4.543500</td>\n    </tr>\n    <tr>\n      <td>1100</td>\n      <td>4.528300</td>\n    </tr>\n    <tr>\n      <td>1200</td>\n      <td>4.531500</td>\n    </tr>\n    <tr>\n      <td>1300</td>\n      <td>4.496300</td>\n    </tr>\n    <tr>\n      <td>1400</td>\n      <td>4.480600</td>\n    </tr>\n    <tr>\n      <td>1500</td>\n      <td>4.462000</td>\n    </tr>\n    <tr>\n      <td>1600</td>\n      <td>4.468500</td>\n    </tr>\n    <tr>\n      <td>1700</td>\n      <td>4.436400</td>\n    </tr>\n    <tr>\n      <td>1800</td>\n      <td>4.448900</td>\n    </tr>\n    <tr>\n      <td>1900</td>\n      <td>4.408400</td>\n    </tr>\n    <tr>\n      <td>2000</td>\n      <td>4.416900</td>\n    </tr>\n    <tr>\n      <td>2100</td>\n      <td>4.389200</td>\n    </tr>\n    <tr>\n      <td>2200</td>\n      <td>4.411700</td>\n    </tr>\n    <tr>\n      <td>2300</td>\n      <td>4.367300</td>\n    </tr>\n    <tr>\n      <td>2400</td>\n      <td>4.344100</td>\n    </tr>\n    <tr>\n      <td>2500</td>\n      <td>4.380100</td>\n    </tr>\n    <tr>\n      <td>2600</td>\n      <td>4.371900</td>\n    </tr>\n    <tr>\n      <td>2700</td>\n      <td>4.356600</td>\n    </tr>\n    <tr>\n      <td>2800</td>\n      <td>4.316400</td>\n    </tr>\n    <tr>\n      <td>2900</td>\n      <td>4.357100</td>\n    </tr>\n    <tr>\n      <td>3000</td>\n      <td>4.319500</td>\n    </tr>\n    <tr>\n      <td>3100</td>\n      <td>4.309800</td>\n    </tr>\n    <tr>\n      <td>3200</td>\n      <td>4.355200</td>\n    </tr>\n    <tr>\n      <td>3300</td>\n      <td>4.337300</td>\n    </tr>\n    <tr>\n      <td>3400</td>\n      <td>4.307400</td>\n    </tr>\n    <tr>\n      <td>3500</td>\n      <td>4.287400</td>\n    </tr>\n    <tr>\n      <td>3600</td>\n      <td>4.333600</td>\n    </tr>\n    <tr>\n      <td>3700</td>\n      <td>4.279300</td>\n    </tr>\n    <tr>\n      <td>3800</td>\n      <td>4.279100</td>\n    </tr>\n    <tr>\n      <td>3900</td>\n      <td>4.281100</td>\n    </tr>\n    <tr>\n      <td>4000</td>\n      <td>4.285000</td>\n    </tr>\n    <tr>\n      <td>4100</td>\n      <td>4.272800</td>\n    </tr>\n    <tr>\n      <td>4200</td>\n      <td>4.260900</td>\n    </tr>\n    <tr>\n      <td>4300</td>\n      <td>4.276000</td>\n    </tr>\n    <tr>\n      <td>4400</td>\n      <td>4.271200</td>\n    </tr>\n    <tr>\n      <td>4500</td>\n      <td>4.260300</td>\n    </tr>\n    <tr>\n      <td>4600</td>\n      <td>4.243900</td>\n    </tr>\n    <tr>\n      <td>4700</td>\n      <td>4.240800</td>\n    </tr>\n    <tr>\n      <td>4800</td>\n      <td>4.238000</td>\n    </tr>\n    <tr>\n      <td>4900</td>\n      <td>4.253800</td>\n    </tr>\n    <tr>\n      <td>5000</td>\n      <td>4.257600</td>\n    </tr>\n    <tr>\n      <td>5100</td>\n      <td>4.262200</td>\n    </tr>\n    <tr>\n      <td>5200</td>\n      <td>4.227000</td>\n    </tr>\n    <tr>\n      <td>5300</td>\n      <td>4.218500</td>\n    </tr>\n    <tr>\n      <td>5400</td>\n      <td>4.228900</td>\n    </tr>\n    <tr>\n      <td>5500</td>\n      <td>4.231000</td>\n    </tr>\n    <tr>\n      <td>5600</td>\n      <td>4.234200</td>\n    </tr>\n    <tr>\n      <td>5700</td>\n      <td>4.219100</td>\n    </tr>\n    <tr>\n      <td>5800</td>\n      <td>4.207100</td>\n    </tr>\n    <tr>\n      <td>5900</td>\n      <td>4.186900</td>\n    </tr>\n    <tr>\n      <td>6000</td>\n      <td>4.196000</td>\n    </tr>\n    <tr>\n      <td>6100</td>\n      <td>4.201700</td>\n    </tr>\n    <tr>\n      <td>6200</td>\n      <td>4.171300</td>\n    </tr>\n    <tr>\n      <td>6300</td>\n      <td>4.196700</td>\n    </tr>\n    <tr>\n      <td>6400</td>\n      <td>4.171000</td>\n    </tr>\n    <tr>\n      <td>6500</td>\n      <td>4.165100</td>\n    </tr>\n    <tr>\n      <td>6600</td>\n      <td>4.170500</td>\n    </tr>\n    <tr>\n      <td>6700</td>\n      <td>4.184400</td>\n    </tr>\n    <tr>\n      <td>6800</td>\n      <td>4.196800</td>\n    </tr>\n    <tr>\n      <td>6900</td>\n      <td>4.157400</td>\n    </tr>\n    <tr>\n      <td>7000</td>\n      <td>4.179900</td>\n    </tr>\n    <tr>\n      <td>7100</td>\n      <td>4.182900</td>\n    </tr>\n    <tr>\n      <td>7200</td>\n      <td>4.177600</td>\n    </tr>\n    <tr>\n      <td>7300</td>\n      <td>4.195100</td>\n    </tr>\n    <tr>\n      <td>7400</td>\n      <td>4.151800</td>\n    </tr>\n    <tr>\n      <td>7500</td>\n      <td>4.155300</td>\n    </tr>\n    <tr>\n      <td>7600</td>\n      <td>4.155500</td>\n    </tr>\n    <tr>\n      <td>7700</td>\n      <td>4.166200</td>\n    </tr>\n    <tr>\n      <td>7800</td>\n      <td>4.152900</td>\n    </tr>\n    <tr>\n      <td>7900</td>\n      <td>4.157800</td>\n    </tr>\n    <tr>\n      <td>8000</td>\n      <td>4.177800</td>\n    </tr>\n    <tr>\n      <td>8100</td>\n      <td>4.149200</td>\n    </tr>\n    <tr>\n      <td>8200</td>\n      <td>4.145400</td>\n    </tr>\n    <tr>\n      <td>8300</td>\n      <td>4.137500</td>\n    </tr>\n    <tr>\n      <td>8400</td>\n      <td>4.159900</td>\n    </tr>\n    <tr>\n      <td>8500</td>\n      <td>4.152900</td>\n    </tr>\n    <tr>\n      <td>8600</td>\n      <td>4.154300</td>\n    </tr>\n    <tr>\n      <td>8700</td>\n      <td>4.154700</td>\n    </tr>\n    <tr>\n      <td>8800</td>\n      <td>4.158200</td>\n    </tr>\n    <tr>\n      <td>8900</td>\n      <td>4.146900</td>\n    </tr>\n    <tr>\n      <td>9000</td>\n      <td>4.141600</td>\n    </tr>\n    <tr>\n      <td>9100</td>\n      <td>4.145500</td>\n    </tr>\n    <tr>\n      <td>9200</td>\n      <td>4.129400</td>\n    </tr>\n    <tr>\n      <td>9300</td>\n      <td>4.135400</td>\n    </tr>\n    <tr>\n      <td>9400</td>\n      <td>4.106700</td>\n    </tr>\n    <tr>\n      <td>9500</td>\n      <td>4.124900</td>\n    </tr>\n    <tr>\n      <td>9600</td>\n      <td>4.101300</td>\n    </tr>\n    <tr>\n      <td>9700</td>\n      <td>4.135200</td>\n    </tr>\n    <tr>\n      <td>9800</td>\n      <td>4.131600</td>\n    </tr>\n    <tr>\n      <td>9900</td>\n      <td>4.139800</td>\n    </tr>\n    <tr>\n      <td>10000</td>\n      <td>4.124000</td>\n    </tr>\n    <tr>\n      <td>10100</td>\n      <td>4.089400</td>\n    </tr>\n    <tr>\n      <td>10200</td>\n      <td>4.077200</td>\n    </tr>\n    <tr>\n      <td>10300</td>\n      <td>4.131900</td>\n    </tr>\n    <tr>\n      <td>10400</td>\n      <td>4.123300</td>\n    </tr>\n    <tr>\n      <td>10500</td>\n      <td>4.090000</td>\n    </tr>\n    <tr>\n      <td>10600</td>\n      <td>4.099000</td>\n    </tr>\n    <tr>\n      <td>10700</td>\n      <td>4.149100</td>\n    </tr>\n    <tr>\n      <td>10800</td>\n      <td>4.094300</td>\n    </tr>\n    <tr>\n      <td>10900</td>\n      <td>4.114100</td>\n    </tr>\n    <tr>\n      <td>11000</td>\n      <td>4.132500</td>\n    </tr>\n    <tr>\n      <td>11100</td>\n      <td>4.103700</td>\n    </tr>\n    <tr>\n      <td>11200</td>\n      <td>4.132900</td>\n    </tr>\n    <tr>\n      <td>11300</td>\n      <td>4.116900</td>\n    </tr>\n    <tr>\n      <td>11400</td>\n      <td>4.091300</td>\n    </tr>\n    <tr>\n      <td>11500</td>\n      <td>4.129900</td>\n    </tr>\n    <tr>\n      <td>11600</td>\n      <td>4.104900</td>\n    </tr>\n    <tr>\n      <td>11700</td>\n      <td>4.088900</td>\n    </tr>\n    <tr>\n      <td>11800</td>\n      <td>4.079800</td>\n    </tr>\n    <tr>\n      <td>11900</td>\n      <td>4.128100</td>\n    </tr>\n    <tr>\n      <td>12000</td>\n      <td>4.085900</td>\n    </tr>\n    <tr>\n      <td>12100</td>\n      <td>4.108700</td>\n    </tr>\n    <tr>\n      <td>12200</td>\n      <td>4.081900</td>\n    </tr>\n    <tr>\n      <td>12300</td>\n      <td>4.072000</td>\n    </tr>\n    <tr>\n      <td>12400</td>\n      <td>4.105900</td>\n    </tr>\n    <tr>\n      <td>12500</td>\n      <td>4.092700</td>\n    </tr>\n    <tr>\n      <td>12600</td>\n      <td>4.081800</td>\n    </tr>\n    <tr>\n      <td>12700</td>\n      <td>4.082200</td>\n    </tr>\n    <tr>\n      <td>12800</td>\n      <td>4.042700</td>\n    </tr>\n    <tr>\n      <td>12900</td>\n      <td>4.089600</td>\n    </tr>\n    <tr>\n      <td>13000</td>\n      <td>4.069900</td>\n    </tr>\n    <tr>\n      <td>13100</td>\n      <td>4.073000</td>\n    </tr>\n    <tr>\n      <td>13200</td>\n      <td>4.072700</td>\n    </tr>\n    <tr>\n      <td>13300</td>\n      <td>4.069500</td>\n    </tr>\n    <tr>\n      <td>13400</td>\n      <td>4.072900</td>\n    </tr>\n    <tr>\n      <td>13500</td>\n      <td>4.077800</td>\n    </tr>\n    <tr>\n      <td>13600</td>\n      <td>4.073500</td>\n    </tr>\n    <tr>\n      <td>13700</td>\n      <td>4.074800</td>\n    </tr>\n    <tr>\n      <td>13800</td>\n      <td>4.076400</td>\n    </tr>\n    <tr>\n      <td>13900</td>\n      <td>4.059500</td>\n    </tr>\n    <tr>\n      <td>14000</td>\n      <td>4.055100</td>\n    </tr>\n    <tr>\n      <td>14100</td>\n      <td>4.073200</td>\n    </tr>\n    <tr>\n      <td>14200</td>\n      <td>4.054400</td>\n    </tr>\n    <tr>\n      <td>14300</td>\n      <td>4.034100</td>\n    </tr>\n    <tr>\n      <td>14400</td>\n      <td>4.081100</td>\n    </tr>\n    <tr>\n      <td>14500</td>\n      <td>4.077800</td>\n    </tr>\n    <tr>\n      <td>14600</td>\n      <td>4.053700</td>\n    </tr>\n    <tr>\n      <td>14700</td>\n      <td>4.073200</td>\n    </tr>\n    <tr>\n      <td>14800</td>\n      <td>4.038300</td>\n    </tr>\n    <tr>\n      <td>14900</td>\n      <td>4.059000</td>\n    </tr>\n    <tr>\n      <td>15000</td>\n      <td>4.077300</td>\n    </tr>\n    <tr>\n      <td>15100</td>\n      <td>4.051200</td>\n    </tr>\n    <tr>\n      <td>15200</td>\n      <td>4.078300</td>\n    </tr>\n    <tr>\n      <td>15300</td>\n      <td>4.072100</td>\n    </tr>\n    <tr>\n      <td>15400</td>\n      <td>4.036300</td>\n    </tr>\n    <tr>\n      <td>15500</td>\n      <td>4.074000</td>\n    </tr>\n    <tr>\n      <td>15600</td>\n      <td>4.068400</td>\n    </tr>\n    <tr>\n      <td>15700</td>\n      <td>4.047500</td>\n    </tr>\n    <tr>\n      <td>15800</td>\n      <td>4.045500</td>\n    </tr>\n    <tr>\n      <td>15900</td>\n      <td>4.045500</td>\n    </tr>\n    <tr>\n      <td>16000</td>\n      <td>4.032400</td>\n    </tr>\n    <tr>\n      <td>16100</td>\n      <td>4.058700</td>\n    </tr>\n    <tr>\n      <td>16200</td>\n      <td>4.038900</td>\n    </tr>\n    <tr>\n      <td>16300</td>\n      <td>4.036600</td>\n    </tr>\n    <tr>\n      <td>16400</td>\n      <td>4.097900</td>\n    </tr>\n    <tr>\n      <td>16500</td>\n      <td>4.038400</td>\n    </tr>\n    <tr>\n      <td>16600</td>\n      <td>4.029900</td>\n    </tr>\n    <tr>\n      <td>16700</td>\n      <td>4.064200</td>\n    </tr>\n    <tr>\n      <td>16800</td>\n      <td>4.043700</td>\n    </tr>\n    <tr>\n      <td>16900</td>\n      <td>4.040300</td>\n    </tr>\n    <tr>\n      <td>17000</td>\n      <td>4.046900</td>\n    </tr>\n    <tr>\n      <td>17100</td>\n      <td>4.034100</td>\n    </tr>\n    <tr>\n      <td>17200</td>\n      <td>4.042200</td>\n    </tr>\n    <tr>\n      <td>17300</td>\n      <td>4.043500</td>\n    </tr>\n    <tr>\n      <td>17400</td>\n      <td>4.035600</td>\n    </tr>\n    <tr>\n      <td>17500</td>\n      <td>4.040800</td>\n    </tr>\n    <tr>\n      <td>17600</td>\n      <td>4.022500</td>\n    </tr>\n    <tr>\n      <td>17700</td>\n      <td>4.026000</td>\n    </tr>\n    <tr>\n      <td>17800</td>\n      <td>4.047300</td>\n    </tr>\n    <tr>\n      <td>17900</td>\n      <td>4.029700</td>\n    </tr>\n    <tr>\n      <td>18000</td>\n      <td>4.012200</td>\n    </tr>\n    <tr>\n      <td>18100</td>\n      <td>4.081200</td>\n    </tr>\n    <tr>\n      <td>18200</td>\n      <td>4.006900</td>\n    </tr>\n    <tr>\n      <td>18300</td>\n      <td>4.034500</td>\n    </tr>\n    <tr>\n      <td>18400</td>\n      <td>4.030900</td>\n    </tr>\n    <tr>\n      <td>18500</td>\n      <td>4.037600</td>\n    </tr>\n    <tr>\n      <td>18600</td>\n      <td>4.020400</td>\n    </tr>\n    <tr>\n      <td>18700</td>\n      <td>4.032000</td>\n    </tr>\n    <tr>\n      <td>18800</td>\n      <td>4.028600</td>\n    </tr>\n    <tr>\n      <td>18900</td>\n      <td>4.019000</td>\n    </tr>\n    <tr>\n      <td>19000</td>\n      <td>4.052700</td>\n    </tr>\n    <tr>\n      <td>19100</td>\n      <td>4.029500</td>\n    </tr>\n    <tr>\n      <td>19200</td>\n      <td>4.034300</td>\n    </tr>\n    <tr>\n      <td>19300</td>\n      <td>4.028000</td>\n    </tr>\n    <tr>\n      <td>19400</td>\n      <td>4.021000</td>\n    </tr>\n    <tr>\n      <td>19500</td>\n      <td>4.022900</td>\n    </tr>\n    <tr>\n      <td>19600</td>\n      <td>3.999900</td>\n    </tr>\n    <tr>\n      <td>19700</td>\n      <td>4.030200</td>\n    </tr>\n    <tr>\n      <td>19800</td>\n      <td>4.021800</td>\n    </tr>\n    <tr>\n      <td>19900</td>\n      <td>4.013300</td>\n    </tr>\n    <tr>\n      <td>20000</td>\n      <td>4.017700</td>\n    </tr>\n    <tr>\n      <td>20100</td>\n      <td>4.019900</td>\n    </tr>\n    <tr>\n      <td>20200</td>\n      <td>4.008800</td>\n    </tr>\n    <tr>\n      <td>20300</td>\n      <td>4.007100</td>\n    </tr>\n    <tr>\n      <td>20400</td>\n      <td>4.006600</td>\n    </tr>\n    <tr>\n      <td>20500</td>\n      <td>4.028000</td>\n    </tr>\n    <tr>\n      <td>20600</td>\n      <td>4.009700</td>\n    </tr>\n    <tr>\n      <td>20700</td>\n      <td>4.028500</td>\n    </tr>\n    <tr>\n      <td>20800</td>\n      <td>4.018000</td>\n    </tr>\n    <tr>\n      <td>20900</td>\n      <td>4.001400</td>\n    </tr>\n    <tr>\n      <td>21000</td>\n      <td>4.019400</td>\n    </tr>\n    <tr>\n      <td>21100</td>\n      <td>4.031100</td>\n    </tr>\n    <tr>\n      <td>21200</td>\n      <td>4.029200</td>\n    </tr>\n    <tr>\n      <td>21300</td>\n      <td>4.049600</td>\n    </tr>\n    <tr>\n      <td>21400</td>\n      <td>3.995800</td>\n    </tr>\n    <tr>\n      <td>21500</td>\n      <td>4.045600</td>\n    </tr>\n    <tr>\n      <td>21600</td>\n      <td>4.054800</td>\n    </tr>\n    <tr>\n      <td>21700</td>\n      <td>4.023000</td>\n    </tr>\n    <tr>\n      <td>21800</td>\n      <td>3.997400</td>\n    </tr>\n    <tr>\n      <td>21900</td>\n      <td>4.034000</td>\n    </tr>\n    <tr>\n      <td>22000</td>\n      <td>3.995400</td>\n    </tr>\n    <tr>\n      <td>22100</td>\n      <td>3.998000</td>\n    </tr>\n    <tr>\n      <td>22200</td>\n      <td>4.023800</td>\n    </tr>\n    <tr>\n      <td>22300</td>\n      <td>4.015000</td>\n    </tr>\n    <tr>\n      <td>22400</td>\n      <td>4.025000</td>\n    </tr>\n    <tr>\n      <td>22500</td>\n      <td>3.988700</td>\n    </tr>\n    <tr>\n      <td>22600</td>\n      <td>4.022400</td>\n    </tr>\n    <tr>\n      <td>22700</td>\n      <td>4.035600</td>\n    </tr>\n    <tr>\n      <td>22800</td>\n      <td>4.020100</td>\n    </tr>\n    <tr>\n      <td>22900</td>\n      <td>4.009200</td>\n    </tr>\n    <tr>\n      <td>23000</td>\n      <td>4.015500</td>\n    </tr>\n    <tr>\n      <td>23100</td>\n      <td>4.049700</td>\n    </tr>\n    <tr>\n      <td>23200</td>\n      <td>4.003400</td>\n    </tr>\n    <tr>\n      <td>23300</td>\n      <td>4.002100</td>\n    </tr>\n    <tr>\n      <td>23400</td>\n      <td>4.006700</td>\n    </tr>\n    <tr>\n      <td>23500</td>\n      <td>4.030300</td>\n    </tr>\n    <tr>\n      <td>23600</td>\n      <td>4.015700</td>\n    </tr>\n    <tr>\n      <td>23700</td>\n      <td>4.025400</td>\n    </tr>\n    <tr>\n      <td>23800</td>\n      <td>4.017100</td>\n    </tr>\n    <tr>\n      <td>23900</td>\n      <td>4.022200</td>\n    </tr>\n    <tr>\n      <td>24000</td>\n      <td>4.035300</td>\n    </tr>\n    <tr>\n      <td>24100</td>\n      <td>3.977600</td>\n    </tr>\n    <tr>\n      <td>24200</td>\n      <td>4.009600</td>\n    </tr>\n    <tr>\n      <td>24300</td>\n      <td>4.010500</td>\n    </tr>\n    <tr>\n      <td>24400</td>\n      <td>4.011000</td>\n    </tr>\n    <tr>\n      <td>24500</td>\n      <td>3.997800</td>\n    </tr>\n    <tr>\n      <td>24600</td>\n      <td>3.983600</td>\n    </tr>\n    <tr>\n      <td>24700</td>\n      <td>4.018200</td>\n    </tr>\n    <tr>\n      <td>24800</td>\n      <td>4.031500</td>\n    </tr>\n    <tr>\n      <td>24900</td>\n      <td>4.006900</td>\n    </tr>\n    <tr>\n      <td>25000</td>\n      <td>4.042400</td>\n    </tr>\n  </tbody>\n</table><p>"},"metadata":{}},{"execution_count":19,"output_type":"execute_result","data":{"text/plain":"TrainOutput(global_step=25000, training_loss=4.145965269775391, metrics={'train_runtime': 4896.8167, 'train_samples_per_second': 40.843, 'train_steps_per_second': 5.105, 'total_flos': 1.30646016e+16, 'train_loss': 4.145965269775391, 'epoch': 0.5466153577050901})"},"metadata":{}}],"execution_count":19},{"cell_type":"markdown","source":"# Save the Fine-Tuned Model","metadata":{}},{"cell_type":"code","source":"model_dir = \"./gpt2-india-news\"\ntrainer.save_model(model_dir)\ntokenizer.save_pretrained(model_dir)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T18:41:57.427730Z","iopub.execute_input":"2025-04-20T18:41:57.428054Z","iopub.status.idle":"2025-04-20T18:41:58.922800Z","shell.execute_reply.started":"2025-04-20T18:41:57.428035Z","shell.execute_reply":"2025-04-20T18:41:58.922205Z"}},"outputs":[{"execution_count":20,"output_type":"execute_result","data":{"text/plain":"('./gpt2-india-news/tokenizer_config.json',\n './gpt2-india-news/special_tokens_map.json',\n './gpt2-india-news/vocab.json',\n './gpt2-india-news/merges.txt',\n './gpt2-india-news/added_tokens.json')"},"metadata":{}}],"execution_count":20},{"cell_type":"markdown","source":"# Generate Headlines from Prompt","metadata":{}},{"cell_type":"code","source":"from transformers import pipeline\n\ngenerator = pipeline(\"text-generation\", model=model_dir, tokenizer=model_dir, device=0)\n\n# Prompt-based generation\nprompt = input(\"📝 Enter a prompt (e.g., 'India launches'): \")\ngenerated = generator(prompt, max_length=100, temperature=0.9, top_k=50, top_p=0.95, do_sample=True)\n\nprint(\"\\n✨ Generated Text:\\n\")\nprint(generated[0]['generated_text'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T18:42:47.145163Z","iopub.execute_input":"2025-04-20T18:42:47.145762Z","iopub.status.idle":"2025-04-20T18:43:12.082176Z","shell.execute_reply.started":"2025-04-20T18:42:47.145741Z","shell.execute_reply":"2025-04-20T18:43:12.081567Z"}},"outputs":[{"name":"stderr","text":"Device set to use cuda:0\n","output_type":"stream"},{"output_type":"stream","name":"stdin","text":"📝 Enter a prompt (e.g., 'India launches'):  India launches\n"},{"name":"stderr","text":"Truncation was not explicitly activated but `max_length` is provided a specific value, please use `truncation=True` to explicitly truncate examples to max length. Defaulting to 'longest_first' truncation strategy. If you encode pairs of sequences (GLUE-style) with the tokenizer you can select this strategy more precisely by providing a specific strategy to `truncation`.\n","output_type":"stream"},{"name":"stdout","text":"\n✨ Generated Text:\n\nIndia launches new mobile phone unit\nTribal girl kidnapped; raped in Jharkhand\nYouth; 20; commits suicide\nGujarat: 5 arrested for murdering trader\n2 held with Rs 2.2 lakh from businessman\nNMC's new traffic rules: Residents protest lack of parking\nCovid-19: No respite for Rajdhani residents; 2 more recover\nPune: Dumped in river; villagers in fear of missing families\nMumbai: 1\n","output_type":"stream"}],"execution_count":21},{"cell_type":"markdown","source":"# Visualize Top Token Frequencies","metadata":{}},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\n# Take the full dataset or subset\ntext_data = \" \".join(df[\"headline_text\"].astype(str).tolist())\ntokens_encoded = tokenizer.encode(text_data)\ntoken_counts = pd.Series(tokens_encoded).value_counts().sort_values(ascending=False)[:30]\ntokens = [tokenizer.decode([i]) for i in token_counts.index]\n\nplt.figure(figsize=(12, 6))\nplt.bar(tokens, token_counts.values)\nplt.title(\"Top 30 Most Frequent Tokens\")\nplt.xticks(rotation=45)\nplt.ylabel(\"Frequency\")\nplt.grid(axis='y')\nplt.tight_layout()\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T18:44:09.497855Z","iopub.execute_input":"2025-04-20T18:44:09.498474Z","iopub.status.idle":"2025-04-20T18:48:13.245304Z","shell.execute_reply.started":"2025-04-20T18:44:09.498453Z","shell.execute_reply":"2025-04-20T18:48:13.244490Z"}},"outputs":[{"name":"stderr","text":"Token indices sequence length is longer than the specified maximum sequence length for this model (41860276 > 1024). Running this sequence through the model will result in indexing errors\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x600 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":22},{"cell_type":"markdown","source":"# Evaluate Perplexity","metadata":{}},{"cell_type":"code","source":"import torch\n\ndef calculate_perplexity(eval_text):\n    encodings = tokenizer(eval_text, return_tensors=\"pt\").to(model.device)\n    max_length = model.config.n_positions\n    stride = 512\n    nlls = []\n    for i in range(0, encodings.input_ids.size(1), stride):\n        begin_loc = max(i + stride - max_length, 0)\n        end_loc = min(i + stride, encodings.input_ids.size(1))\n        input_ids = encodings.input_ids[:, begin_loc:end_loc]\n        target_ids = input_ids.clone()\n        with torch.no_grad():\n            outputs = model(input_ids, labels=target_ids)\n            neg_log_likelihood = outputs.loss * (end_loc - begin_loc)\n        nlls.append(neg_log_likelihood)\n    ppl = torch.exp(torch.stack(nlls).sum() / end_loc)\n    return ppl.item()\n\neval_text = input(\"\\n🔍 Enter a sample to evaluate perplexity: \")\nprint(\"📊 Perplexity:\", calculate_perplexity(eval_text))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T18:55:44.725889Z","iopub.execute_input":"2025-04-20T18:55:44.726706Z","iopub.status.idle":"2025-04-20T18:56:45.639274Z","shell.execute_reply.started":"2025-04-20T18:55:44.726682Z","shell.execute_reply":"2025-04-20T18:56:45.638586Z"}},"outputs":[{"output_type":"stream","name":"stdin","text":"\n🔍 Enter a sample to evaluate perplexity:  Stock market sees biggest fall in six months\n"},{"name":"stdout","text":"📊 Perplexity: 33.37989807128906\n","output_type":"stream"}],"execution_count":23},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}